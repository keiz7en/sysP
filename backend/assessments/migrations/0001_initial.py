# Generated by Django 5.2.7 on 2025-10-17 16:30

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('type', models.CharField(choices=[('quiz', 'Quiz'), ('test', 'Test'), ('assignment', 'Assignment'), ('project', 'Project'), ('essay', 'Essay')], max_length=20)),
                ('total_marks', models.IntegerField()),
                ('duration_minutes', models.IntegerField(blank=True, null=True)),
                ('attempts_allowed', models.IntegerField(default=1)),
                ('ai_generated', models.BooleanField(default=False)),
                ('adaptive_difficulty', models.BooleanField(default=False)),
                ('auto_grading', models.BooleanField(default=True)),
                ('available_from', models.DateTimeField()),
                ('available_until', models.DateTimeField()),
                ('randomize_questions', models.BooleanField(default=False)),
                ('show_results_immediately', models.BooleanField(default=True)),
                ('allow_review', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'assessments',
            },
        ),
        migrations.CreateModel(
            name='AssessmentAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_attempts', models.IntegerField(default=0)),
                ('average_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('highest_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('lowest_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('question_difficulty_analysis', models.JSONField(default=dict)),
                ('question_discrimination_index', models.JSONField(default=dict)),
                ('score_distribution', models.JSONField(default=dict)),
                ('time_analysis', models.JSONField(default=dict)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'assessment_analytics',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('mcq', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('essay', 'Essay'), ('fill_blank', 'Fill in the Blank'), ('matching', 'Matching')], max_length=20)),
                ('marks', models.IntegerField()),
                ('order', models.IntegerField()),
                ('options', models.JSONField(default=list)),
                ('correct_answer', models.JSONField(default=dict)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('bloom_taxonomy_level', models.CharField(blank=True, choices=[('remember', 'Remember'), ('understand', 'Understand'), ('apply', 'Apply'), ('analyze', 'Analyze'), ('evaluate', 'Evaluate'), ('create', 'Create')], max_length=20)),
                ('ai_generated', models.BooleanField(default=False)),
                ('source_content', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'questions',
            },
        ),
        migrations.CreateModel(
            name='StudentAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.JSONField()),
                ('is_correct', models.BooleanField(blank=True, null=True)),
                ('marks_awarded', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('ai_graded', models.BooleanField(default=False)),
                ('ai_feedback', models.TextField(blank=True)),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('manually_reviewed', models.BooleanField(default=False)),
                ('teacher_feedback', models.TextField(blank=True)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'student_answers',
            },
        ),
        migrations.CreateModel(
            name='StudentAssessmentAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.IntegerField()),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('time_taken', models.DurationField(blank=True, null=True)),
                ('total_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('submitted', 'Submitted'), ('graded', 'Graded'), ('reviewed', 'Reviewed')], default='in_progress', max_length=15)),
                ('performance_analysis', models.JSONField(default=dict)),
                ('strengths', models.JSONField(default=list)),
                ('weaknesses', models.JSONField(default=list)),
                ('recommendations', models.JSONField(default=list)),
            ],
            options={
                'db_table': 'student_assessment_attempts',
            },
        ),
    ]
