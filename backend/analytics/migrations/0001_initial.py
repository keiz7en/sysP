# Generated by Django 5.2.7 on 2025-10-17 16:30

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdmissionOutcomeAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cohort_year', models.IntegerField()),
                ('admission_criteria_weights', models.JSONField(default=dict)),
                ('strongest_predictors', models.JSONField(default=list)),
                ('weakest_predictors', models.JSONField(default=list)),
                ('demographic_success_rates', models.JSONField(default=dict)),
                ('equity_metrics', models.JSONField(default=dict)),
                ('graduation_rates', models.JSONField(default=dict)),
                ('employment_rates', models.JSONField(default=dict)),
                ('career_progression', models.JSONField(default=dict)),
                ('admission_improvements', models.JSONField(default=list)),
                ('support_program_suggestions', models.JSONField(default=list)),
                ('analysis_completed_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'admission_outcome_analysis',
            },
        ),
        migrations.CreateModel(
            name='DropoutPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_score', models.DecimalField(decimal_places=2, max_digits=3)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], max_length=10)),
                ('risk_factors', models.JSONField(default=list)),
                ('protective_factors', models.JSONField(default=list)),
                ('intervention_recommendations', models.JSONField(default=list)),
                ('priority_actions', models.JSONField(default=list)),
                ('model_version', models.CharField(max_length=20)),
                ('confidence_score', models.DecimalField(decimal_places=2, max_digits=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'dropout_predictions',
            },
        ),
        migrations.CreateModel(
            name='InstitutionalAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_name', models.CharField(max_length=200)),
                ('analysis_date', models.DateField()),
                ('total_students', models.IntegerField()),
                ('new_enrollments', models.IntegerField()),
                ('active_students', models.IntegerField()),
                ('dropout_rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('average_gpa', models.DecimalField(decimal_places=2, max_digits=3)),
                ('pass_rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('completion_rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('most_popular_courses', models.JSONField(default=list)),
                ('highest_rated_courses', models.JSONField(default=list)),
                ('courses_needing_improvement', models.JSONField(default=list)),
                ('teacher_performance_summary', models.JSONField(default=dict)),
                ('platform_usage_stats', models.JSONField(default=dict)),
                ('feature_adoption_rates', models.JSONField(default=dict)),
                ('key_insights', models.JSONField(default=list)),
                ('recommendations', models.JSONField(default=list)),
            ],
            options={
                'db_table': 'institutional_analytics',
            },
        ),
        migrations.CreateModel(
            name='LearningAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time_spent', models.DurationField()),
                ('content_interactions', models.IntegerField(default=0)),
                ('quiz_attempts', models.IntegerField(default=0)),
                ('discussion_posts', models.IntegerField(default=0)),
                ('average_quiz_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('assignment_completion_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('learning_velocity', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('engagement_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10)),
                ('preferred_learning_times', models.JSONField(default=list)),
                ('content_preferences', models.JSONField(default=dict)),
                ('difficulty_adaptation', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'learning_analytics',
            },
        ),
        migrations.CreateModel(
            name='LearningEffectivenessMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_name', models.CharField(max_length=100)),
                ('metric_type', models.CharField(choices=[('content', 'Content Type'), ('methodology', 'Teaching Methodology'), ('technology', 'Technology Usage'), ('timing', 'Learning Timing')], max_length=20)),
                ('approach_a', models.CharField(max_length=100)),
                ('approach_b', models.CharField(max_length=100)),
                ('approach_a_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('approach_b_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('improvement_percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('p_value', models.DecimalField(decimal_places=4, max_digits=5)),
                ('sample_size', models.IntegerField()),
                ('confidence_level', models.DecimalField(decimal_places=2, max_digits=3)),
                ('subject_area', models.CharField(max_length=100)),
                ('student_demographics', models.JSONField(default=dict)),
                ('duration_tested', models.DurationField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'learning_effectiveness_metrics',
            },
        ),
        migrations.CreateModel(
            name='PerformanceTrends',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('trend_type', models.CharField(choices=[('improving', 'Improving'), ('declining', 'Declining'), ('stable', 'Stable'), ('volatile', 'Volatile')], max_length=20)),
                ('trend_slope', models.DecimalField(decimal_places=4, max_digits=5)),
                ('correlation_coefficient', models.DecimalField(decimal_places=2, max_digits=3)),
                ('variance', models.DecimalField(decimal_places=4, max_digits=5)),
                ('subject_trends', models.JSONField(default=dict)),
                ('skill_trends', models.JSONField(default=dict)),
                ('projected_performance', models.JSONField(default=dict)),
                ('confidence_intervals', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'performance_trends',
            },
        ),
    ]
